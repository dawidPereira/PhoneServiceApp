// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneService.Persistance;

namespace PhoneService.Persistance.Migrations
{
    [DbContext(typeof(PhoneServiceDbContext))]
    [Migration("20181206163953_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PhoneService.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNum");

                    b.Property<string>("TaxNum");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerAddres", b =>
                {
                    b.Property<int>("CustomerAddresId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<string>("City");

                    b.Property<int>("CustomerId");

                    b.Property<string>("PostCode");

                    b.HasKey("CustomerAddresId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerAddres");
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerRepair", b =>
                {
                    b.Property<int>("RepairId");

                    b.Property<int>("CustomerId");

                    b.HasKey("RepairId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerRepair");
                });

            modelBuilder.Entity("PhoneService.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Model");

                    b.Property<string>("Producer");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PhoneService.Domain.ProductSaparePart", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("SaparePartId");

                    b.HasKey("ProductId", "SaparePartId");

                    b.HasIndex("SaparePartId");

                    b.ToTable("ProductSapareParts");
                });

            modelBuilder.Entity("PhoneService.Domain.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<int?>("RepairStatusId");

                    b.HasKey("RepairId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RepairStatusId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("PhoneService.Domain.RepairProduct", b =>
                {
                    b.Property<int>("RepairId");

                    b.Property<int>("ProductId");

                    b.HasKey("RepairId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("RepairProduct");
                });

            modelBuilder.Entity("PhoneService.Domain.RepairStatus", b =>
                {
                    b.Property<int>("RepairStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RepairStatusId");

                    b.ToTable("RepairStatuses");
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePart", b =>
                {
                    b.Property<int>("SaparePartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("ReferenceNumebr");

                    b.HasKey("SaparePartId");

                    b.ToTable("SapareParts");
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePartItem", b =>
                {
                    b.Property<int>("SaparePartItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity");

                    b.Property<int?>("RepairId");

                    b.HasKey("SaparePartItemId");

                    b.HasIndex("RepairId");

                    b.ToTable("SaparePartItems");
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePartSaparePartItem", b =>
                {
                    b.Property<int>("SaparePartId");

                    b.Property<int>("SaparePartItemId");

                    b.HasKey("SaparePartId", "SaparePartItemId");

                    b.HasIndex("SaparePartItemId");

                    b.ToTable("SaparePartSaparePartItem");
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerAddres", b =>
                {
                    b.HasOne("PhoneService.Domain.Customer", "Customer")
                        .WithOne("Addres")
                        .HasForeignKey("PhoneService.Domain.CustomerAddres", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerRepair", b =>
                {
                    b.HasOne("PhoneService.Domain.Customer", "Customer")
                        .WithMany("CustomerRepairs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.Repair", "Repair")
                        .WithMany("CustomerRepairs")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.ProductSaparePart", b =>
                {
                    b.HasOne("PhoneService.Domain.Product", "Product")
                        .WithMany("ProductSapareParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.SaparePart", "SaparePart")
                        .WithMany("ProductSapareParts")
                        .HasForeignKey("SaparePartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.Repair", b =>
                {
                    b.HasOne("PhoneService.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("PhoneService.Domain.RepairStatus", "RepairStatus")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairStatusId");
                });

            modelBuilder.Entity("PhoneService.Domain.RepairProduct", b =>
                {
                    b.HasOne("PhoneService.Domain.Product", "Product")
                        .WithMany("RepairProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.Repair", "Repair")
                        .WithMany("RepairProducts")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePartItem", b =>
                {
                    b.HasOne("PhoneService.Domain.Repair", "Repair")
                        .WithMany("SaparePartItems")
                        .HasForeignKey("RepairId");
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePartSaparePartItem", b =>
                {
                    b.HasOne("PhoneService.Domain.SaparePart", "SaparePart")
                        .WithMany("SaparePartSaparePartItems")
                        .HasForeignKey("SaparePartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.SaparePartItem", "SaparePartItem")
                        .WithMany("SaparePartSaparePartItems")
                        .HasForeignKey("SaparePartItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
