// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneService.Persistance;

namespace PhoneService.App.Migrations
{
    [DbContext(typeof(PhoneServiceDbContext))]
    partial class PhoneServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhoneService.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNum");

                    b.Property<string>("TaxNum");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new { CustomerId = 1, Email = "pereiradawid@example.com", LastName = "Pereira", Name = "Dawid", PhoneNum = "781 361 182", TaxNum = "91032298349" },
                        new { CustomerId = 2, Email = "maksymilainmatula@example.com", LastName = "Matuła", Name = "Maksymilian", PhoneNum = "685 432 234", TaxNum = "89022338243" },
                        new { CustomerId = 3, Email = "miloszwinnicki@example.com", LastName = "Winnicki", Name = "Miłosz", PhoneNum = "783 234 432", TaxNum = "88113029383" },
                        new { CustomerId = 4, Email = "rafalpasek@example.com", LastName = "Pasek", Name = "Rafał", PhoneNum = "984 343 234", TaxNum = "94022829304" },
                        new { CustomerId = 5, Email = "grzegorzwojcik@example.com", LastName = "Wójcik", Name = "Grzegorz", PhoneNum = "745 543 321", TaxNum = "90010129348" },
                        new { CustomerId = 6, Email = "zbigniewwolski@example.com", LastName = "Wolski", Name = "Zbigniew", PhoneNum = "500 433 333", TaxNum = "70071429378" },
                        new { CustomerId = 7, Email = "tomaszbrzyski@example.com", LastName = "Brzyski", Name = "Tomasz", PhoneNum = "678 432 342", TaxNum = "66052229304" },
                        new { CustomerId = 8, Email = "monikazawadzka@example.com", LastName = "Zawadzka", Name = "Monika", PhoneNum = "787 438 282", TaxNum = "99011039456" },
                        new { CustomerId = 9, Email = "zofiawlodarczyk@example.com", LastName = "Włodarczyk", Name = "Zofia", PhoneNum = "378 392 234", TaxNum = "51031993845" },
                        new { CustomerId = 10, Email = "nataliabudzinska@example.com", LastName = "Brudzińska", Name = "Natalia", PhoneNum = "878 984 774", TaxNum = "87083095743" },
                        new { CustomerId = 11, Email = "emanuelmazowiecki@example.com", LastName = "Mazowiecki", Name = "Emanuel", PhoneNum = "577 573 572", TaxNum = "98070574834" },
                        new { CustomerId = 12, Email = "ewelinadobkowska@example.com", LastName = "Dobkowska", Name = "Ewelina", PhoneNum = "675 584 994", TaxNum = "65091138596" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerAddres", b =>
                {
                    b.Property<int>("CustomerAddresId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<string>("City");

                    b.Property<int>("CustomerId");

                    b.Property<string>("PostCode");

                    b.HasKey("CustomerAddresId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerAddres");

                    b.HasData(
                        new { CustomerAddresId = 1, Adress = "Maćkówka 155", City = "Przeworsk", CustomerId = 1, PostCode = "37-200" },
                        new { CustomerAddresId = 2, Adress = "Zawiła 12", City = "Dąbrowa Górnicza", CustomerId = 2, PostCode = "43-204" },
                        new { CustomerAddresId = 3, Adress = "Przy Torze 3", City = "Rzeszów", CustomerId = 3, PostCode = "35-356" },
                        new { CustomerAddresId = 4, Adress = "Zaczernie 23", City = "Sosnowiec", CustomerId = 4, PostCode = "30-300" },
                        new { CustomerAddresId = 5, Adress = "1000-lecia 89", City = "Żwirki i Muchomorki", CustomerId = 5, PostCode = "11-222" },
                        new { CustomerAddresId = 6, Adress = "Powstańców Warszawy 56", City = "Rzeszów", CustomerId = 6, PostCode = "25-567" },
                        new { CustomerAddresId = 7, Adress = "Tadeusza Kościuszki 558", City = "Rzeszów", CustomerId = 7, PostCode = "45 -432" },
                        new { CustomerAddresId = 8, Adress = "Wesoła 11", City = "Łańcut", CustomerId = 8, PostCode = "94-675" },
                        new { CustomerAddresId = 9, Adress = "Zarzecze 87", City = "Tarnów", CustomerId = 9, PostCode = "65-987" },
                        new { CustomerAddresId = 10, Adress = "Osiedle Spokojna Dolina 23", City = "Jarosław", CustomerId = 10, PostCode = "45-342" },
                        new { CustomerAddresId = 11, Adress = "Kolorowa 93", City = "Przemyśl", CustomerId = 11, PostCode = "43-432" },
                        new { CustomerAddresId = 12, Adress = "Podgórze 9", City = "Rzeszów", CustomerId = 12, PostCode = "21-765" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PhoneService.Domain.Entities.EmailSubject", b =>
                {
                    b.Property<int>("EmailSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subject");

                    b.HasKey("EmailSubjectId");

                    b.ToTable("EmailSubjects");

                    b.HasData(
                        new { EmailSubjectId = 1, Subject = "Twoja naprawa została wyceniona" },
                        new { EmailSubjectId = 2, Subject = "Twoja naprawa została przekazana do realizacji" },
                        new { EmailSubjectId = 3, Subject = "Status Twojej naprawy został zmieniony" },
                        new { EmailSubjectId = 4, Subject = "Twój telefon jest gotowy do odbioru" },
                        new { EmailSubjectId = 5, Subject = "Zarejestrowaliśmy Twoją naprawę" },
                        new { EmailSubjectId = 6, Subject = "Twoje konto zostało zarejestrowane" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemplateName");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new { EmailTemplateId = 1, TemplateName = "StatusChangeTemplate.html" },
                        new { EmailTemplateId = 2, TemplateName = "CustomerDecisionTemplate.html" },
                        new { EmailTemplateId = 3, TemplateName = "RepairAddTemplate.html" },
                        new { EmailTemplateId = 4, TemplateName = "CustomerCreateTemplate.html" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Model");

                    b.Property<string>("Producer");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, Description = "Nie wiem po co nam opis produktu", Model = "S8", Producer = "Samsung" },
                        new { ProductId = 2, Description = "Mam wrażenie, że trzeba usunąć opis", Model = "3310", Producer = "Nokia" },
                        new { ProductId = 3, Description = "Przepraszam czy to pomyłka", Model = "Mi 8", Producer = "Xiaomi" },
                        new { ProductId = 4, Description = "Policja? - Proszę przyjechać na facebooka", Model = "4A", Producer = "Redmi" },
                        new { ProductId = 5, Description = "Policja? - Proszę przyjechać na facebooka", Model = "P20", Producer = "Huwawei" },
                        new { ProductId = 6, Description = "Policja? - Proszę przyjechać na facebooka", Model = "Xperia 10", Producer = "Sony" },
                        new { ProductId = 7, Description = "Policja? - Proszę przyjechać na facebooka", Model = "X1", Producer = "PocoPhone" },
                        new { ProductId = 8, Description = "Policja? - Proszę przyjechać na facebooka", Model = "Desire 10", Producer = "HTC" },
                        new { ProductId = 9, Description = "Policja? - Proszę przyjechać na facebooka", Model = "X", Producer = "Apple" },
                        new { ProductId = 10, Description = "Co jam ma tu wpisać ?", Model = "SE6", Producer = "Sony Ericson" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.ProductSaparePart", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("SaparePartId");

                    b.HasKey("ProductId", "SaparePartId");

                    b.HasIndex("SaparePartId");

                    b.ToTable("ProductSapareParts");

                    b.HasData(
                        new { ProductId = 1, SaparePartId = 1 },
                        new { ProductId = 1, SaparePartId = 3 },
                        new { ProductId = 1, SaparePartId = 5 },
                        new { ProductId = 1, SaparePartId = 7 },
                        new { ProductId = 1, SaparePartId = 9 },
                        new { ProductId = 1, SaparePartId = 10 },
                        new { ProductId = 2, SaparePartId = 2 },
                        new { ProductId = 2, SaparePartId = 4 },
                        new { ProductId = 2, SaparePartId = 6 },
                        new { ProductId = 2, SaparePartId = 8 },
                        new { ProductId = 2, SaparePartId = 9 },
                        new { ProductId = 2, SaparePartId = 10 },
                        new { ProductId = 3, SaparePartId = 2 },
                        new { ProductId = 3, SaparePartId = 4 },
                        new { ProductId = 3, SaparePartId = 6 },
                        new { ProductId = 3, SaparePartId = 8 },
                        new { ProductId = 3, SaparePartId = 9 },
                        new { ProductId = 3, SaparePartId = 10 },
                        new { ProductId = 4, SaparePartId = 2 },
                        new { ProductId = 4, SaparePartId = 4 },
                        new { ProductId = 4, SaparePartId = 6 },
                        new { ProductId = 4, SaparePartId = 8 },
                        new { ProductId = 4, SaparePartId = 9 },
                        new { ProductId = 4, SaparePartId = 10 },
                        new { ProductId = 5, SaparePartId = 1 },
                        new { ProductId = 5, SaparePartId = 3 },
                        new { ProductId = 5, SaparePartId = 5 },
                        new { ProductId = 5, SaparePartId = 7 },
                        new { ProductId = 5, SaparePartId = 9 },
                        new { ProductId = 5, SaparePartId = 10 },
                        new { ProductId = 6, SaparePartId = 2 },
                        new { ProductId = 6, SaparePartId = 4 },
                        new { ProductId = 6, SaparePartId = 6 },
                        new { ProductId = 6, SaparePartId = 8 },
                        new { ProductId = 6, SaparePartId = 9 },
                        new { ProductId = 6, SaparePartId = 10 },
                        new { ProductId = 7, SaparePartId = 1 },
                        new { ProductId = 7, SaparePartId = 3 },
                        new { ProductId = 7, SaparePartId = 5 },
                        new { ProductId = 7, SaparePartId = 7 },
                        new { ProductId = 7, SaparePartId = 9 },
                        new { ProductId = 7, SaparePartId = 10 },
                        new { ProductId = 8, SaparePartId = 2 },
                        new { ProductId = 8, SaparePartId = 4 },
                        new { ProductId = 8, SaparePartId = 6 },
                        new { ProductId = 8, SaparePartId = 8 },
                        new { ProductId = 8, SaparePartId = 9 },
                        new { ProductId = 8, SaparePartId = 10 },
                        new { ProductId = 9, SaparePartId = 1 },
                        new { ProductId = 9, SaparePartId = 3 },
                        new { ProductId = 9, SaparePartId = 5 },
                        new { ProductId = 9, SaparePartId = 7 },
                        new { ProductId = 9, SaparePartId = 9 },
                        new { ProductId = 9, SaparePartId = 10 },
                        new { ProductId = 10, SaparePartId = 2 },
                        new { ProductId = 10, SaparePartId = 4 },
                        new { ProductId = 10, SaparePartId = 6 },
                        new { ProductId = 10, SaparePartId = 8 },
                        new { ProductId = 10, SaparePartId = 9 },
                        new { ProductId = 10, SaparePartId = 10 }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<int>("ProductId");

                    b.Property<int>("RepairStatusId");

                    b.HasKey("RepairId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RepairStatusId");

                    b.ToTable("Repairs");

                    b.HasData(
                        new { RepairId = 1, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 1, Description = "Klient zgłasza problem z krótkim czasem pracy telefonu", ProductId = 1, RepairStatusId = 1 },
                        new { RepairId = 2, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 1, Description = "Po aktualizacji systemu, telefon znacznie spowolnił. Pojawiają się błędy graficzne, a telefon się przegrzewa", ProductId = 5, RepairStatusId = 1 },
                        new { RepairId = 3, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 2, Description = "Klient nie może dodzwonić się do nikogo", ProductId = 2, RepairStatusId = 1 },
                        new { RepairId = 4, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 3, Description = "Klientowi nie działa klawiatura", ProductId = 3, RepairStatusId = 1 },
                        new { RepairId = 5, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 3, Description = "Popsuty głośnik", ProductId = 4, RepairStatusId = 1 },
                        new { RepairId = 6, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 4, Description = "Telefon został zalany przez klienta. Po zdarzeniu przestał działać wyświetlacz oraz głośnik", ProductId = 1, RepairStatusId = 1 },
                        new { RepairId = 7, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 5, Description = "Klient serwisował telefon u konkurencji, naprawa nie odniosła pozytynego skutku. Zgłosił sie do nas z prośba o rozwiązanie problemu z niedziałajacą baterią, oraz z prosbą o personalizację etiu.", ProductId = 2, RepairStatusId = 1 },
                        new { RepairId = 8, CreateDate = new DateTime(2019, 1, 9, 9, 35, 10, 435, DateTimeKind.Utc), CustomerId = 5, Description = "Klient prosi o szybki czas realizacji", ProductId = 5, RepairStatusId = 1 }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.RepairItem", b =>
                {
                    b.Property<int>("RepairId");

                    b.Property<int>("SaparePartId");

                    b.Property<int>("Quantity");

                    b.HasKey("RepairId", "SaparePartId");

                    b.HasIndex("SaparePartId");

                    b.ToTable("RepairItems");
                });

            modelBuilder.Entity("PhoneService.Domain.RepairStatus", b =>
                {
                    b.Property<int>("RepairStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RepairStatusId");

                    b.ToTable("RepairStatuses");

                    b.HasData(
                        new { RepairStatusId = 1, Name = "Przyjeta" },
                        new { RepairStatusId = 2, Name = "Wyceniona" },
                        new { RepairStatusId = 3, Name = "W trakcie realizacji" },
                        new { RepairStatusId = 4, Name = "Zrealizowana" },
                        new { RepairStatusId = 5, Name = "Zakończona" },
                        new { RepairStatusId = 6, Name = "Odrzucona" },
                        new { RepairStatusId = 7, Name = "Zakończona bez naprawy" }
                    );
                });

            modelBuilder.Entity("PhoneService.Domain.SaparePart", b =>
                {
                    b.Property<int>("SaparePartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("ReferenceNumber");

                    b.HasKey("SaparePartId");

                    b.ToTable("SapareParts");

                    b.HasData(
                        new { SaparePartId = 1, Name = "Wyświetlacz 5,5 cala", Price = 150m, ReferenceNumber = "253FG32" },
                        new { SaparePartId = 2, Name = "Wyświetlacz 6,5 cala", Price = 220m, ReferenceNumber = "2352s32" },
                        new { SaparePartId = 3, Name = "Powłoka ochronna 5,5 cala", Price = 18m, ReferenceNumber = "23XX32" },
                        new { SaparePartId = 4, Name = "Powłoka ochronna 6,5 cala", Price = 22m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 5, Name = "Bateria 2200 mAh", Price = 180m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 6, Name = "Bateria 3000 mAh", Price = 275m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 7, Name = "Pokrowiec ochronny 5,5 cala", Price = 29m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 8, Name = "Pokrowiec ochronny 6,5 cala", Price = 49m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 9, Name = "Ładowarka", Price = 49m, ReferenceNumber = "5DS352" },
                        new { SaparePartId = 10, Name = "Spersonalizowane Etui", Price = 149m, ReferenceNumber = "5DS352" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PhoneService.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PhoneService.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PhoneService.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.CustomerAddres", b =>
                {
                    b.HasOne("PhoneService.Domain.Customer", "Customer")
                        .WithOne("Addres")
                        .HasForeignKey("PhoneService.Domain.CustomerAddres", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.ProductSaparePart", b =>
                {
                    b.HasOne("PhoneService.Domain.Product", "Product")
                        .WithMany("ProductSapareParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.SaparePart", "SaparePart")
                        .WithMany("ProductSapareParts")
                        .HasForeignKey("SaparePartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.Repair", b =>
                {
                    b.HasOne("PhoneService.Domain.Customer", "Customer")
                        .WithMany("Repairs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.Product", "Product")
                        .WithMany("Repairs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.RepairStatus", "RepairStatus")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PhoneService.Domain.RepairItem", b =>
                {
                    b.HasOne("PhoneService.Domain.Repair", "Repair")
                        .WithMany("RepairItems")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhoneService.Domain.SaparePart", "SaparePart")
                        .WithMany("RepairItems")
                        .HasForeignKey("SaparePartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
